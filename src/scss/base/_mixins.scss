// clearfix
@mixin clearfix {
  &:after {
    clear: both;
    content: "";
    display: table;
  }
}
%clearfix { @include clearfix; }

@mixin noScrollbar () {
  scrollbar-width: none;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  &::-webkit-scrollbar { display: none; }
}
%no-scrollbar { @include noScrollbar(); }

@mixin hScrollbox () {
  @include noScrollbar();
  overflow-x: auto;
  overflow-y: hidden;
  white-space: nowrap;
  word-wrap: normal; // for IE9-10
  > li,
  > div {
    display: inline-block;
    vertical-align: top;
    white-space: normal;
  }
}

@mixin cssSlider () {
  -webkit-overflow-scrolling: touch;
  scroll-snap-type: x mandatory;
  li, > a { scroll-snap-align: start; }
}

@mixin visually-hidden {
  /* Remove the item from normal flow */
  position: absolute;
  /* Workaround for falsely pronounced, smushed text */
  white-space: nowrap;
  /* Set it to the smallest possible size (some screen readers ignore elements with zero height and width) */
  width: 1px;
  height: 1px;
  /* Hide overflowing content after resizing */
  overflow: hidden;
  /* Reset any property that may change the elements size */
  border: 0;
  padding: 0;
  /* Clipping defines what part of an element should be displayed. */
  /* Deprecated clip property for older browsers */
  clip: rect(0 0 0 0);
  /* clip-path for newer browsers. inset(50%) defines an inset rectangle that makes the content disappear.  */
  clip-path: inset(50%);
    /* It seems like at the moment nobody is quite sure why margin: -1px is there. On top of that it seems to cause issues (see: https://github.com/h5bp/html5-boilerplate/issues/1985). */
  margin: -1px;
}
%visually-hidden { @include visually-hidden; }

@mixin border() {
  position: relative;
  &:before {
    content: '';
    position: absolute;
    top: 0;
    width: 1px;
    height: 100%;
    background: url('../img/divider-light.svg') 0 0 repeat-y;
  }
}

@mixin divider-bottom {
  margin-bottom: rem(15);
  padding-bottom: rem(15);
  border-bottom: 1px solid $border-light;
}
@mixin divider-bottom-wide {
  margin-bottom: rem(30);
  padding-bottom: rem(30);
  border-bottom: 1px solid $border-light;
}
@mixin divider-top {
  margin-top: rem(15);
  padding-top: rem(15);
  border-top: 1px solid $border-light;
}
@mixin divider-top-wide {
  margin-top: rem(30);
  padding-top: rem(30);
  border-top: 1px solid $border-light;
}
@mixin divider-top-bold {
  margin-top: rem(40);
  padding-top: rem(20);
  border-top: 1px solid $c-border-dark;
}

@mixin txt-overlay () {
  position: relative;
  .txt {
    position: absolute;
    bottom: rem(20);
    left: rem(20);
    width: calc(100% - 120px);
    color: #fff;
  }
  h3 a { display: block; }
  figure a:after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 100%;
    height: 90%;
    background: linear-gradient(to top, Rgba(0, 0, 0, 0.8), Rgba(0, 0, 0, 0));
  }
  .decor {
    right: rem(30);
    bottom: rem(30);
    width: auto;
  }
}


@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size, $prop: font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    #{$prop}: $min-font-size;
    @media screen and (min-width: $min-vw) {
      #{$prop}: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
    }
    @media screen and (min-width: $max-vw) { #{$prop}: $max-font-size; }
  }
}