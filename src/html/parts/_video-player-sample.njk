{# cross browser video player #}
{% set mp4_file = 'https://mdn.github.io/learning-area/accessibility/multimedia/rabbit320.mp4' %}
{% set webm_file = 'https://mdn.github.io/learning-area/accessibility/multimedia/rabbit320.webm' %}
{% set ogg_file = 'https://mdn.github.io/learning-area/accessibility/multimedia/rabbit320.ogg' %}

<div class="video-container">
  {# <figure> #}
    <video class="video" controls preload="metadata" poster="img/poster.jpg">
      <source src="{{ mp4_file }}" type="video/mp4">
      <source src="{{ webm_file }}" type="video/webm">
      <source src="{{ ogg_file }}" type="video/ogg">
  
      <!-- Flash fallback -->
      <object type="application/x-shockwave-flash" data="flash-player.swf?videoUrl={{ mp4_file }}" width="1024" height="576">
        <param name="movie" value="flash-player.swf?videoUrl={{ mp4_file }}" />
        <param name="allowfullscreen" value="true" />
        <param name="wmode" value="transparent" />
        <param name="flashvars" value="controlbar=over&amp;image=img/poster.jpg&amp;file=flash-player.swf?videoUrl={{ mp4_file }}" />
        <img alt="Tears of Steel poster image" src="img/poster.jpg" width="1024" height="428" title="No video playback possible, please download the video from the link below" />
        </object>
  
        <!-- Offer download -->
        <a href="{{ mp4_file }}">Download MP4</a>
    </video>
    {# <figcaption>&copy; Blender Foundation | <a href="http://mango.blender.org">mango.blender.org</a></figcaption> #}
  {# </figure> #}
  
  {# controls #}
  <ul class="video-controls">
    <li><button class="playpause" type="button">Play/Pause</button></li>
    <li><button class="stop" type="button">Stop</button></li>
    <li class="progress-line">
      <progress class="progress" value="0" min="0">
        <span class="progress-bar"></span>
      </progress>
    </li>
    <li><button class="mute" type="button">Mute/Unmute</button></li>
    <li><button class="volinc" type="button">Vol+</button></li>
    <li><button class="voldec" type="button">Vol-</button></li>
    <li><button class="fs" type="button">Fullscreen</button></li>
  </ul>
</div>




{# scripts #}
<script>
  var forEach = function(array, callback, scope) {
    for (var i = 0; i < array.length; i++) {
      callback.call(scope, array[i], i); 
    }
  };

  var doc = document;
  var supportsVideo = !!doc.createElement('video').canPlayType;
  var video_containers = doc.querySelectorAll('.video-container');
  if (video_containers.length) {
    if (supportsVideo) {
    // set up custom controls
      forEach(video_containers, function (video_container) {
        var video = video_container.querySelector('.video'),
            videoControls = video_container.querySelector('.video-controls');

        // Hide the default controls
        video.controls = false;

        // Display the user defined video controls
        videoControls.style.display = 'block';

        var playpause = videoControls.querySelector('.playpause'),
            stop = videoControls.querySelector('.stop'),
            mute = videoControls.querySelector('.mute'),
            volinc = videoControls.querySelector('.volinc'),
            voldec = videoControls.querySelector('.voldec'),
            progress = videoControls.querySelector('.progress'),
            progressBar = videoControls.querySelector('.progress-bar'),
            fs = videoControls.querySelector('.fs');

        playpause.addEventListener('click', function(e) {
          if (video.paused || video.ended) {
            video.play();
          } else {
            video.pause();
          }
        });

        stop.addEventListener('click', function(e) {
          video.pause();
          video.currentTime = 0;
          progress.value = 0;
        });

        mute.addEventListener('click', function(e) {
          video.muted = !video.muted;
        });

        volinc.addEventListener('click', function(e) {
          alterVolume('+');
        });
        voldec.addEventListener('click', function(e) {
          alterVolume('-');
        });

        var alterVolume = function(dir) {
          var currentVolume = Math.floor(video.volume * 10) / 10;
          if (dir === '+') {
            if (currentVolume < 1) video.volume += 0.1;
          } else if (dir === '-') {
            if (currentVolume > 0) video.volume -= 0.1;
          }
        }

        video.addEventListener('loadedmetadata', function() {
          progress.setAttribute('max', video.duration);
        });

        video.addEventListener('timeupdate', function() {
          progress.value = video.currentTime;
          progressBar.style.width = Math.floor((video.currentTime / video.duration) * 100) + '%';
        });

        video.addEventListener('timeupdate', function() {
          if (!progress.getAttribute('max')) progress.setAttribute('max', video.duration);
          progress.value = video.currentTime;
          progressBar.style.width = Math.floor((video.currentTime / video.duration) * 100) + '%';
        });

        progress.addEventListener('click', function(e) {
          var pos = (e.pageX - this.offsetLeft) / this.offsetWidth;
          video.currentTime = pos * video.duration;
        });

        var fullScreenEnabled = !!(doc.fullscreenEnabled || doc.mozFullScreenEnabled || doc.msFullscreenEnabled || doc.webkitSupportsFullscreen || doc.webkitFullscreenEnabled || doc.createElement('video').webkitRequestFullScreen);
        if (!fullScreenEnabled) {
          fs.style.display = 'none';
        }

        fs.addEventListener('click', function(e) {
          handleFullscreen();
        });

        var handleFullscreen = function() {
          if (isFullScreen()) {
            if (doc.exitFullscreen) doc.exitFullscreen();
            else if (doc.mozCancelFullScreen) doc.mozCancelFullScreen();
            else if (doc.webkitCancelFullScreen) doc.webkitCancelFullScreen();
            else if (doc.msExitFullscreen) doc.msExitFullscreen();
            setFullscreenData(false);
          } else {
            if (video_container.requestFullscreen) video_container.requestFullscreen();
            else if (video_container.mozRequestFullScreen) video_container.mozRequestFullScreen();
            else if (video_container.webkitRequestFullScreen) video_container.webkitRequestFullScreen();
            else if (video_container.msRequestFullscreen) video_container.msRequestFullscreen();
            setFullscreenData(true);
          }
        }

        var isFullScreen = function() {
          return !!(doc.fullScreen || doc.webkitIsFullScreen || doc.mozFullScreen || doc.msFullscreenElement || doc.fullscreenElement);
        }

        var setFullscreenData = function(state) {
          video_container.setAttribute('data-fullscreen', !!state);
        }

        doc.addEventListener('fullscreenchange', function(e) {
          setFullscreenData(!!(doc.fullScreen || doc.fullscreenElement));
        });
        doc.addEventListener('webkitfullscreenchange', function() {
          setFullscreenData(!!doc.webkitIsFullScreen);
        });
        doc.addEventListener('mozfullscreenchange', function() {
          setFullscreenData(!!doc.mozFullScreen);
        });
        doc.addEventListener('msfullscreenchange', function() {
          setFullscreenData(!!doc.msFullscreenElement);
        });
      });

    } else {
      // remove customized controls
      forEach(video_containers, function (video_container) {
        video_container.querySelector('.video-controls').style.display = 'none';
      });
    }
  }
</script>